# -*- coding: utf-8 -*-
"""Crypto Token.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A_iPpx7QWV69XXFyQQGxoOkvWa6lG0Bd
"""

!pip install yfinance
!pip install yahoofinancials
!pip install matplotlib
!pip install numpy

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import yfinance as yf
from yahoofinancials import YahooFinancials
import datetime as dt
import numpy as np
# %matplotlib inline

end = dt.datetime.now()
aapl_df = yf.download('DOT-USD', 
                      start='2022-03-01', 
                      end=end, 
                      progress=False,
)
aapl_df.tail()

end = dt.datetime.now()
stocks=['ADA-USD','AVAX-USD','AXS-USD','BNB-USD','BTC-USD','DOGE-USD','DOT-USD','ETH-USD','LINK-USD','SHIB-USD','SOL-USD','UNI1-USD','XRP-USD']
dfs = yf.download(stocks, start='2022-03-01', 
                      end=end, 
                      progress=False,
)
dfs.tail()

dfs.tail(1)['Close'].round(8)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
# %matplotlib inline

dft=pd.read_csv('https://raw.githubusercontent.com/DONGDEVTH/stock/main/CYPTO.CSV')

dft.style.set_properties(subset=['ADA-USD','AVAX-USD','BNB-USD','BTC-USD','DOGE-USD','DOT-USD','ETH-USD','SHIB-USD','SOL-USD','XRP-USD','TARGET'], **{'text-align': 'right'})

pd.set_option('colheader_justify', 'center')
dft

display(dfs.tail(1)['Close'].round(8), dft)

df4 = pd.DataFrame(dfs.tail(1)['Close'].round(10))
df4

from IPython.display import display
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df4 = pd.DataFrame(dfs.tail(1)['Close'].round(8))

dfx = pd.concat([df4,dft], axis=0)
pd.set_option('colheader_justify', 'center')
dfx

def color_negative_red(val):
    color = 'red' if val < 100 else 'black'
    return 'color: %s' % color

dfx.style.applymap(color_negative_red)

dfx.style.set_properties(**{'background-color': 'black',
                           'color': 'green'})
dfx
dfx.mean()
dfx.to_excel("STOCK_CYPTO_INFO.xlsx")

ticker = yf.Ticker('ADA-USD')
ADA_df = ticker.history(period="5y")
ADA_df['Close'].plot.line(title="ADA-USD", colormap='Set1').get_figure().savefig('ADA-USD')

ticker = yf.Ticker('AVAX-USD')
AVAX_df = ticker.history(period="5y")
AVAX_df['Close'].plot.line(title="AVAX-USD", colormap='Set1').get_figure().savefig('AVAX-USD')

ticker = yf.Ticker('AXS-USD')
AXS_df = ticker.history(period="5y")
AXS_df['Close'].plot.line(title="AXS-USD", colormap='Set1').get_figure().savefig('AXS-USD')

ticker = yf.Ticker('BNB-USD')
BNB_df = ticker.history(period="5y")
BNB_df['Close'].plot.line(title="BNB-USD", colormap='Set1').get_figure().savefig('BNB-USD')

ticker = yf.Ticker('BTC-USD')
BTC_df = ticker.history(period="5y")
BTC_df['Close'].plot.line(title="BTC-USD", colormap='Set1').get_figure().savefig('BTC-USD')

ticker = yf.Ticker('DOGE-USD')
DOGE_df = ticker.history(period="5y")
DOGE_df['Close'].plot.line(title="DOGE-USD", colormap='Set1').get_figure().savefig('DOGE-USD')

ticker = yf.Ticker('DOT-USD')
DOT_df = ticker.history(period="5y")
DOT_df['Close'].plot.line(title="DOT-USD", colormap='Set1').get_figure().savefig('DOT-USD')

ticker = yf.Ticker('ETH-USD')
ETH_df = ticker.history(period="5y")
ETH_df['Close'].plot.line(title="ETH-USD", colormap='Set1').get_figure().savefig('ETH-USD')

ticker = yf.Ticker('LINK-USD')
LINK_df = ticker.history(period="5y")
LINK_df['Close'].plot.line(title="LINK-USD", colormap='Set1').get_figure().savefig('LINK-USD')

ticker = yf.Ticker('SHIB-USD')
SHIB_df = ticker.history(period="5y")
SHIB_df['Close'].plot.line(title="SHIB-USD", colormap='Set1').get_figure().savefig('SHIB-USD')

ticker = yf.Ticker('SOL-USD')
SOL_df = ticker.history(period="5y")
SOL_df['Close'].plot.line(title="SOL-USD", colormap='Set1').get_figure().savefig('SOL-USD')

ticker = yf.Ticker('UNI1-USD')
UNI1_df = ticker.history(period="5y")
UNI1_df['Close'].plot.line(title="UNI1-USD", colormap='Set1').get_figure().savefig('UNI1-USD')

ticker = yf.Ticker('XRP-USD')
XRP_df = ticker.history(period="5y")
XRP_df['Close'].plot.line(title="XRP-USD", colormap='Set1').get_figure().savefig('XRP-USD')

import matplotlib.pyplot as plt

from PIL import Image

image1 = Image.open(r"ADA-USD.png")
image2 = Image.open(r"AVAX-USD.png")
image3 = Image.open(r"AXS-USD.png")
image4 = Image.open(r"BNB-USD.png")
image5 = Image.open(r"BTC-USD.png")
image6 = Image.open(r"DOGE-USD.png")
image7 = Image.open(r"DOT-USD.png")
image8 = Image.open(r"ETH-USD.png")
image9 = Image.open(r"LINK-USD.png")
image10 = Image.open(r"SHIB-USD.png")
image11 = Image.open(r"SOL-USD.png")
image12 = Image.open(r"UNI1-USD.png")
image13 = Image.open(r"XRP-USD.png")


im1 = image1.convert("RGB")
im2 = image2.convert("RGB")
im3 = image3.convert("RGB")
im4 = image4.convert("RGB")
im5 = image5.convert("RGB")
im6 = image6.convert("RGB")
im7 = image7.convert("RGB")
im8 = image8.convert("RGB")
im9 = image9.convert("RGB")
im10 = image10.convert("RGB")
im11 = image11.convert("RGB")
im12 = image12.convert("RGB")
im13 = image13.convert("RGB")


imagelist = [im2,im3,im4,im5,im6,im7,im8,im9,im10,im11,im12,im13]
im1.save(r"STOCK_CYPTO.pdf",save_all=True, 
append_images=imagelist)

import smtplib
import mimetypes
from email.mime.multipart import MIMEMultipart
from email import encoders
from email.message import Message
from email.mime.audio import MIMEAudio
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.text import MIMEText


emailfrom = ""
emailto = ['', '']
#emailtocc = ""
#emailtocc = ""
fileToSend = "STOCK_CYPTO_INFO.xlsx"
fileToSend2 = "STOCK_CYPTO.pdf"
username = ""
password = ""

msg = MIMEMultipart()
msg["From"] = emailfrom
msg['To'] = ", ".join(emailto)
#msg["Cc"] = emailtocc
msg["Subject"] = "CYPTO Price \^ ^/"
msg.preamble = "CYPTO Price \^ ^/"

#EXCEL FILE
ctype, encoding = mimetypes.guess_type(fileToSend)
if ctype is None or encoding is not None:
    ctype = "application/octet-stream"

maintype, subtype = ctype.split("/", 1)

if maintype == "text":
    fp = open(fileToSend)
    # Note: we should handle calculating the charset
    attachment = MIMEText(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "image":
    fp = open(fileToSend, "rb")
    attachment = MIMEImage(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "audio":
    fp = open(fileToSend, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "pdf":
    fp = open(fileToSend, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "xlsx":
    fp = open(fileToSend, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
else:
    fp = open(fileToSend, "rb")
    attachment = MIMEBase(maintype, subtype)
    attachment.set_payload(fp.read())
    fp.close()
    encoders.encode_base64(attachment)
attachment.add_header("Content-Disposition", "attachment", filename=fileToSend)
msg.attach(attachment)

#PICTURE FILE
ctype, encoding = mimetypes.guess_type(fileToSend2)
if ctype is None or encoding is not None:
    ctype = "application/octet-stream"

maintype, subtype = ctype.split("/", 1)

if maintype == "text":
    fp = open(fileToSend2)
    # Note: we should handle calculating the charset
    attachment = MIMEText(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "image":
    fp = open(fileToSend2, "rb")
    attachment = MIMEImage(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "audio":
    fp = open(fileToSend2, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "pdf":
    fp = open(fileToSend2, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
elif maintype == "xlsx":
    fp = open(fileToSend2, "rb")
    attachment = MIMEAudio(fp.read(), _subtype=subtype)
    fp.close()
else:
    fp = open(fileToSend2, "rb")
    attachment = MIMEBase(maintype, subtype)
    attachment.set_payload(fp.read())
    fp.close()
    encoders.encode_base64(attachment)
attachment.add_header("Content-Disposition", "attachment", filename=fileToSend2)
msg.attach(attachment)

server = smtplib.SMTP("smtp.gmail.com:587")
server.starttls()
server.login(username,password)
server.sendmail(emailfrom, emailto, msg.as_string())
server.quit()

